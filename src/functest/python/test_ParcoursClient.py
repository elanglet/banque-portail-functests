# Generated by Selenium IDE
import pytest
import time
import json
import subprocess
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

from webdrivermanager import GeckoDriverManager, ChromeDriverManager, EdgeChromiumDriverManager

# Paquets à installer : 
# 
#   pip install pytest selenium webdrivermanager
#

class TestParcoursClient():

  def setup_class(self):
    # On télécharge et on installe les pilotes pour les navigateurs
    # drivers = (
    #     GeckoDriverManager(),
    #     ChromeDriverManager(),
    #     EdgeChromiumDriverManager()
    # )
    # for driver in drivers:
    #     driver.download_and_install()
    pass
  
  def setup_method(self, method):
    # On démarre le conteneur Docker de base de données
    resultat = subprocess.run(['docker', 'compose', '-f', './docker/compose.yaml', 'up', '-d', '--build'])
    if resultat.returncode != 0:
        pytest.fail("Le conteneur de base de données n'a pas pu démarrer")

    # Attendre que la base soit up
    time.sleep(5)

    self.driver = webdriver.Firefox()
    # Pour utiliser Grid : 
    #
    #  self.driver = webdriver.Remote(
    #      command_executor='http://localhost:4444/wd/hub', 
    #      desired_capabilities=DesiredCapabilities.FIREFOX
    #  )
    #
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
    subprocess.run(['docker', 'compose', '-f', './docker/compose.yaml', 'down'])
  
  def test_authentification_et_affichage_des_comptes(self):
    self.driver.get("http://localhost:5000/")
    self.driver.set_window_size(1920, 1080)
    self.driver.find_element(By.ID, "link-client").click()
    self.driver.find_element(By.ID, "Identifiant").click()
    self.driver.find_element(By.ID, "Identifiant").send_keys("1")
    self.driver.find_element(By.ID, "MotDePasse").click()
    self.driver.find_element(By.ID, "MotDePasse").send_keys("password")
    self.driver.find_element(By.NAME, "Valider").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "h3").text == "Bonjour Robert DUPONT"
    WebDriverWait(self.driver, 2).until(expected_conditions.presence_of_element_located((By.ID, "navbarDropdown")))
    self.driver.find_element(By.ID, "navbarDropdown").click()
    self.driver.find_element(By.LINK_TEXT, "Mes Comptes").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(1)").text == "245646786"
    assert self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(2) > td:nth-child(1)").text == "263434345"
    self.driver.find_element(By.LINK_TEXT, "Déconnexion").click()
  
  def test_authentification_et_virement(self):
    self.driver.get("http://localhost:5000/")
    self.driver.set_window_size(1920, 1080)
    self.driver.find_element(By.ID, "link-client").click()
    self.driver.find_element(By.ID, "Identifiant").click()
    self.driver.find_element(By.ID, "Identifiant").send_keys("1")
    self.driver.find_element(By.ID, "MotDePasse").click()
    self.driver.find_element(By.ID, "MotDePasse").send_keys("password")
    self.driver.find_element(By.NAME, "Valider").click()
    self.driver.find_element(By.ID, "navbarDropdown").click()
    self.driver.find_element(By.LINK_TEXT, "Virements entre comptes").click()
    self.driver.find_element(By.ID, "NumeroCompteADebiter").click()
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(2) #NumeroCompteACrediter").click()
    self.driver.find_element(By.ID, "Montant").click()
    self.driver.find_element(By.ID, "Montant").send_keys("400")
    self.driver.find_element(By.NAME, "Valider").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > td:nth-child(2)").text == "8000,00 €"
    assert self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(2) > td:nth-child(2)").text == "20400,00 €"
    self.driver.find_element(By.LINK_TEXT, "Déconnexion").click()